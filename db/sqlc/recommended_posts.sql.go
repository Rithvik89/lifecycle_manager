// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: recommended_posts.sql

package db

import (
	"context"
)

const getFollowingReaction = `-- name: GetFollowingReaction :many
SELECT count(user_id) as like_count,post_id from likes
where user_id in (
SELECT following_id from networks WHERE
follower_id =(?))
GROUP BY post_id
`

type GetFollowingReactionRow struct {
	LikeCount int64 `json:"like_count"`
	PostID    int64 `json:"post_id"`
}

func (q *Queries) GetFollowingReaction(ctx context.Context, followerID int32) ([]*GetFollowingReactionRow, error) {
	rows, err := q.query(ctx, q.getFollowingReactionStmt, getFollowingReaction, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetFollowingReactionRow{}
	for rows.Next() {
		var i GetFollowingReactionRow
		if err := rows.Scan(&i.LikeCount, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPostRecommendations = `-- name: UpsertPostRecommendations :exec
INSERT INTO postRecommendations (user_id,post_recommendations) VALUES (?,?)
ON DUPLICATE KEY UPDATE post_recommendations  = (?)
`

type UpsertPostRecommendationsParams struct {
	UserID                int32  `json:"user_id"`
	PostRecommendations   string `json:"post_recommendations"`
	PostRecommendations_2 string `json:"post_recommendations_2"`
}

func (q *Queries) UpsertPostRecommendations(ctx context.Context, arg UpsertPostRecommendationsParams) error {
	_, err := q.exec(ctx, q.upsertPostRecommendationsStmt, upsertPostRecommendations, arg.UserID, arg.PostRecommendations, arg.PostRecommendations_2)
	return err
}
